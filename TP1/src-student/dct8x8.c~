#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "dct.h"

#define VAL00 (0.5/4.0)
#define VAL0x (0.7071067/4.0)
#define VALx0 (0.7071067/4.0)
#define VALxx (1.0/4.0)

float Av[8][8] = {
		{ VAL00, VAL0x, VAL0x, VAL0x, VAL0x, VAL0x, VAL0x, VAL0x},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx},
		{VALx0, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx, VALxx}
};

#define PI 3.1416

void slow_float_dct8x8(short pixel[8][8], short data[8][8]);
void float_dct8x8(short pixel[8][8], short data[8][8]);
void float_dct8(float in[8], float out[8]);


void dct8x8(short pixel[8][8], short data[8][8]) {
	slow_float_dct8x8(pixel,data);
//	fast_float_dct8x8(pixel,data);
}



void slow_float_dct8x8(short pixel[8][8], short data[8][8])
{
	int i,j,u, v;
	short tmp[8][8];

	for (v = 0; v < 8; v++) {
		for (u = 0; u < 8; u++) {
			double res_b = 0.0;
			for (i = 0; i < 8; i++) {
				for (j = 0; j < 8; j++) {
					res_b = res_b + Av[u][v] * cos(((2 * i + 1) * u * PI) / 16.0)
							* cos(((2 * j + 1) * v * PI) / 16.0)
							* pixel[i][j];
				}
			}
			tmp[u][v]=res_b;
		}
	}

	for (v=0; v<8; v++) {
		for (u=0; u<8; u++) {
			data[u][v] =  tmp[u][v];
		}
	}
}

void fast_float_dct8x8(short pixel[8][8], short data[8][8])
{
	int l,c,i,j,u, v;
	float in[8][8];
	float out[8][8];
	float out2[8][8];

	// Convert to floating point
	for (l = 0; l < 8; l++) {
		for (c = 0; c < 8; c++) {
			in[l][c]=pixel[l][c];
		}
	}

	// performing 1D-DCT on lines
	for (l = 0; l < 8; l++) {
		float_dct8(in[l],out[l]);
	}

	// transpose intermediate values
	for (l = 0; l < 8; l++) {
		for (c = 0; c < 8; c++) {
			in[l][c]=out[c][l];
		}
	}

	// performing 1D-DCT on columns
	for (l = 0; l < 8; l++) {
		float_dct8(in[l],out2[l]);
	}

	// transposing back and scaling by 4
	for (l = 0; l < 8; l++) {
		for (c = 0; c < 8; c++) {
			data[c][l]=out2[l][c]/4.0;
		}
	}
}


void slow_float_dct8(float in[8], float out[8]) {
	 // à compléter
}

void fast_float_dct8(float in[8], float out[8]) {
	int k,n,i;
	float tmp[8];
	float tmp2[8];

#ifdef TRACE
	printf("\n==== Input ====\n");
	for (i=0;i<8;i++) {
		printf("input[%d] = %f\n",i,in[i]);
	}
#endif

	// Etage 1 à compléter

#ifdef TRACE
	printf("\n==== Stage 1 ====\n");
	for (i=0;i<8;i++) {
		printf("stage1[%d] = %f\n",i,tmp[i]);
	}
#endif

	// Etage 2 à compléter

#ifdef TRACE
	printf("\n==== Stage 2 ====\n");
	for (i=0;i<8;i++) {
		printf("stage2[%d] = %f\n",i,out[i]);
	}
#endif

	// Etage 3 à compléter

#ifdef TRACE
	printf("\n==== Stage 3 ====\n");
	for (i=0;i<8;i++) {
		printf("stage3[%d] = %f\n",i,tmp[i]);
	}
#endif

	// Etage 4 à compléter

#ifdef TRACE
	printf("\n==== Output ====\n");
	for (i=0;i<8;i++) {
		printf("output[%d] = %f\n",i,out[i]);
	}
#endif
}

